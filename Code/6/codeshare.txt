// -----------------------------------------------------------
// https://codeshare.io/2KOj3z
<div>
    <table mat-table [dataSource]="inventoryItems" matSort class="mat-elevation-z8">

        <!-- Checkbox Column-->
        <ng-container matColumnDef="select">
            <th mat-header-cell *matHeaderCellDef>
                <mat-checkbox
                (change)="$event ? masterToggle() : null"
                [checked]="selection.hasValue() && isAllItemsSelected()"
                [indeterminate]="selection.hasValue() && !isAllItemsSelected()">

                </mat-checkbox>
            </th>
            <td mat-cell *matCellDef="let row">
                <mat-checkbox (change)="selection.toggle(row)" [checked]="selection.isSelected(row)">
                </mat-checkbox>
            </td>
        </ng-container>

        <!-- ID Column  -->
        <ng-container matColumnDef="id">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>
            <td mat-cell *matCellDef="let element"> {{element.id}} </td>
        </ng-container>

        <!-- Name Column  -->
        <ng-container matColumnDef="name">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>
            <td mat-cell *matCellDef="let element"> {{element.name}} </td>
        </ng-container>

        <!-- Description Column  -->
        <ng-container matColumnDef="description">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> Description </th>
            <td mat-cell *matCellDef="let element"> {{element.description}} </td>
        </ng-container>

        <!-- User Column  -->
        <ng-container matColumnDef="user">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> User </th>
            <td mat-cell *matCellDef="let element"> {{element.user}} </td>
        </ng-container>

        <!-- Location Column  -->
        <ng-container matColumnDef="location">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> Location </th>
            <td mat-cell *matCellDef="let element"> {{element.location}} </td>
        </ng-container>

        <!-- Inventory Number Column  -->
        <ng-container matColumnDef="inventoryNumber">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> Inventory Number </th>
            <td mat-cell *matCellDef="let element"> {{element.inventoryNumber}} </td>
        </ng-container>

        <!-- createdAt Number Column  -->
        <ng-container matColumnDef="createdAt">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> Created At </th>
            <td mat-cell *matCellDef="let element"> {{element.createdAt | date }} </td>
        </ng-container>

        <!-- modifiedAt Number Column  -->
        <ng-container matColumnDef="modifiedAt">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> Modified At </th>
            <td mat-cell *matCellDef="let element"> {{element.modifiedAt | date}} </td>
        </ng-container>

        <!-- deleted Number Column  -->
        <ng-container matColumnDef="deleted">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> Deleted </th>
            <td mat-cell *matCellDef="let element"> {{element.deleted}} </td>
        </ng-container>

        <tr mat-header-row *matHeaderRowDef="inventoryColumns"></tr>
        <tr mat-row *matRowDef="let row; columns: inventoryColumns;"></tr>
    </table>
    <mat-paginator [pageSizeOptions]="[3, 5, 6, 10]" showFirstLastButtons></mat-paginator>
</div>

// -----------------------------------------------------------
// https://codeshare.io/aYkWRN
import { Component, OnInit, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { InventoryListMockService } from '../../app-logic/inventory-list-mock.service';
import { InventoryItem } from '../../app-logic/inventory-item';
import { MatSort } from '@angular/material/sort';
import { SelectionModel } from '@angular/cdk/collections';

@Component({
  selector: 'app-inventory',
  templateUrl: './inventory.component.html',
  styleUrls: ['./inventory.component.css']
})
export class InventoryComponent implements OnInit {

  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;
  @ViewChild(MatSort, { static: true }) sort: MatSort;

  selection = new SelectionModel<Element>(true, []);
  inventoryItems: any;
  inventoryColumns: string[] = [
    'select',
    'id',
    'name',
    'user',
    'description',
    'location',
    'inventoryNumber',
    'createdAt',
    'modifiedAt',
    'deleted'
  ];

  constructor(private inventoryListMockService: InventoryListMockService) { }

  ngOnInit(): void {
    this.inventoryItems = new MatTableDataSource<InventoryItem>(this.inventoryListMockService.getData());
    this.inventoryItems.paginator = this.paginator;
    this.inventoryItems.sort = this.sort;
  }

  masterToggle(){
    console.log(this.inventoryItems);
    this.isAllItemsSelected() ? 
    this.selection.clear() : 
    this.inventoryItems.data.forEach(row => {
      this.selection.select(row);
    });
  }

  isAllItemsSelected(){
    const selectedItems = this.selection.selected.length;
    const numOfRows = this.inventoryItems.data.length;
    return selectedItems === numOfRows;
  }
}
